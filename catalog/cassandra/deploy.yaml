---
apiVersion: v1
kind: Service
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  ports:
  - port: 9042
  selector:
    app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                       - cassandra
                topologyKey: kubernetes.io/hostname

      terminationGracePeriodSeconds: 1800
      containers:
        - name: cassandra
          image: cassandra:3
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 7000
            name: intra-node
          - containerPort: 7001
            name: tls-intra-node
          - containerPort: 7199
            name: jmx
          - containerPort: 9042
            name: cql
          resources:
            requests:
              cpu: "500m"
              memory: 1Gi
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          lifecycle:
            preStop:
              exec:
                command: [ "/opt/cassandra/bin/nodetool", "drain" ]
          env:
            - name: K8S_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MAX_HEAP_SIZE
              value: 512M
            - name: HEAP_NEWSIZE
              value: 100M
            # service name pods will be served through
            # this is used to join the pod to the cluster
            - name: SERVICE_NAME
              value: cassandra
            # the ordinals of the nodes that every node
            # will contact when it comes online
            # This gets translatd into CASSANDRA_SEEDS
            - name: CLUSTER_JOIN_ORDINALS
              value: 0 1 2

            - name: CASSANDRA_CLUSTER_NAME
              value: "CassandraCluster"
            - name: CASSANDRA_DC
              value: "DC1"
            - name: CASSANDRA_RACK
              value: "Rack1"

          command:
            - bash
            - -c
            - |
              if [ "${SERVICE_NAME}" == "" ]; then
                echo "SERVICE_NAME must be defined"
                exit 1
              fi
              
              if [ "${CLUSTER_JOIN_ORDINALS}" == "" ]; then
                echo "CLUSTER_JOIN_ORDINALS must be defined"
                exit 1
              fi

              if ! [[ `hostname` =~ ([A-Za-z0-9_-]+)-([0-9]+)$ ]]; then
                  echo "container hostnames must contain ordinals"
                  exit 1
              fi
              
              HOSTNAME_ORDINAL=${BASH_REMATCH[2]}
              HOSTNAME_BASE=${BASH_REMATCH[1]}

              CASSANDRA_SEEDS=""
              for ordinal in ${CLUSTER_JOIN_ORDINALS}; do
                CASSANDRA_SEEDS="${CASSANDRA_SEEDS}${HOSTNAME_BASE}-${ordinal}.${SERVICE_NAME}.${K8S_NAMESPACE}.svc.cluster.local,"
              done
              CASSANDRA_SEEDS="${CASSANDRA_SEEDS%,}"

              export CASSANDRA_SEEDS="${CASSANDRA_SEEDS}"

              /docker-entrypoint.sh
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  /opt/cassandra/bin/nodetool status | grep $K8S_POD_IP | grep -q ^UN
            initialDelaySeconds: 15
            timeoutSeconds: 5
          volumeMounts:
          - name: cassandra-data
            mountPath: /cassandra_data
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

