# This was ported from the cockroachdb site and patched to actually work
---
apiVersion: v1
kind: Service
metadata:
  name: cockroachdb
  labels:
    app: cockroachdb
spec:
  ports:
    - port: 26257
      targetPort: 26257
      name: grpc
    - port: 8080
      targetPort: 8080
      name: http
  selector:
    app: cockroachdb
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cockroachdb-budget
  labels:
    app: cockroachdb
spec:
  selector:
    matchLabels:
      app: cockroachdb
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cockroachdb
spec:
  serviceName: cockroachdb
  replicas: 3
  selector:
    matchLabels:
      app: cockroachdb
  template:
    metadata:
      labels:
        app: cockroachdb
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                       - cockroachdb
                topologyKey: kubernetes.io/hostname
      initContainers:
        - name: init-sync-download
          image: ghcr.io/scalabledelivery/init-sync:v1.0
          imagePullPolicy: IfNotPresent
          env:
            - name: ACTION
              value: RECV
            - name: SHARE_DIR
              value: /cockroach/certs
            - name: SHARED_SECRET
              valueFrom:
                secretKeyRef:
                  name: cockroach-init-sync
                  key: shared-secret
            - name: SERVICE_NAME
              value: cockroachdb
          volumeMounts:
            - name: cockroach-certs
              mountPath: /cockroach/certs
        - name: cockroachdb-init
          image: cockroachdb/cockroach:v21.1.3
          imagePullPolicy: IfNotPresent
          env:
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Space separated list of valid service names
            # This is neccessary for the certificate generation
            - name: SERVICE_NAMES
              value: cockroachdb
            - name: CLUSTER_JOIN_ORDINALS
              value: 0 1 2
          volumeMounts:
            - name: cockroach-data
              mountPath: /cockroach/cockroach-data
            - name: cockroach-certs
              mountPath: /cockroach/certs
          command:
            - "/bin/bash"
            - "-c"
            - |
              set -ex
              if [ "${SERVICE_NAMES}" == "" ]; then
                echo "SERVICE_NAMES must be defined"
                exit 1
              fi

              if ! [[ `hostname` =~ ([A-Za-z0-9_-]+)-([0-9]+)$ ]]; then
                  echo "container hostnames must contain ordinals"
                  exit 1
              fi
              
              HOSTNAME_ORDINAL=${BASH_REMATCH[2]}
              HOSTNAME_BASE=${BASH_REMATCH[1]}
              
              # If we're host 0 in the statefulset, generate certs.
              if [[ $HOSTNAME_ORDINAL -eq 0 ]]; then
                # Store the service names
                if [ ! -f /cockroach/certs/service_names.txt ]; then

                  # Generate the join pool
                  PARSED_CLUSTER_INIT_POOL=""
                  for ordinal in ${CLUSTER_JOIN_ORDINALS}; do
                    for svc_name in ${SERVICE_NAMES}; do
                      PARSED_CLUSTER_INIT_POOL="${PARSED_CLUSTER_INIT_POOL}${HOSTNAME_BASE}-${ordinal}.${svc_name},"
                    done
                  done
                  PARSED_CLUSTER_INIT_POOL="${PARSED_CLUSTER_INIT_POOL%,}"

                  echo ${PARSED_CLUSTER_INIT_POOL} > /cockroach/certs/join_pool.txt
                fi

                # Generate if ca.crt does not exist
                if [ ! -f /cockroach/certs/ca.crt ]; then
                  cockroach cert create-ca --certs-dir=/cockroach/certs --ca-key=/cockroach/certs/ca.key
                fi

                # Generate if client.root.crt does not exist
                if [ ! -f /cockroach/certs/client.root.crt ]; then
                  cockroach cert create-client root --certs-dir=/cockroach/certs --ca-key=/cockroach/certs/ca.key
                fi

                # Generate if node.crt does not exist
                if [ ! -f /cockroach/certs/node.crt ]; then
                  CERTIFICATE_NAMES=""
                  for svc_name in ${SERVICE_NAMES}; do
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} ${svc_name}"
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} ${svc_name}.${K8S_NAMESPACE}"
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} ${svc_name}.${K8S_NAMESPACE}.svc.cluster.local"
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} *.${svc_name}"
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} *.${svc_name}.${K8S_NAMESPACE}"
                    CERTIFICATE_NAMES="${CERTIFICATE_NAMES} *.${svc_name}.${K8S_NAMESPACE}.svc.cluster.local"
                  done
                  cockroach cert create-node --certs-dir=/cockroach/certs --ca-key=/cockroach/certs/ca.key localhost 127.0.0.1 ${CERTIFICATE_NAMES}
                fi
              fi
      containers:
        - name: cockroachdb
          image: cockroachdb/cockroach:v21.1.3
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "500m"
              memory: "300Mi"
          ports:
            - containerPort: 26257
              name: grpc
            - containerPort: 8080
              name: http
          livenessProbe:
            httpGet:
              path: "/health"
              port: http
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: "/health?ready=1"
              port: http
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 2
          volumeMounts:
            - name: cockroach-data
              mountPath: /cockroach/cockroach-data
            - name: cockroach-certs
              mountPath: /cockroach/certs
          env:
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: COCKROACH_CHANNEL
              value: kubernetes-secure
          command:
            - "/bin/bash"
            - "-c"
            - |
              #!/bin/bash

              /cockroach/cockroach start --logtostderr --certs-dir /cockroach/certs --advertise-host $(hostname -f) --http-addr 0.0.0.0 --join $(cat /cockroach/certs/join_pool.txt)

              # Note: You may want to consider adding this flags for tuning purposes
              #--cache $(expr $MEMORY_LIMIT_MIB / 4)MiB
              #--max-sql-memory $(expr $MEMORY_LIMIT_MIB / 4)MiB
              
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -c
                  - |
                    # Skip init if we have this file marker
                    [ -f /cockroach/certs/.cluster_initialized ] && exit 0
                    # Initialize the cluster if we don't have the marker
                    # Nice thing about this command is that it will just retry until it works
                    /cockroach/cockroach init --certs-dir=/cockroach/certs && touch /cockroach/certs/.cluster_initialized
        - name: init-sync-daemon
          image: ghcr.io/scalabledelivery/init-sync:v1.0
          imagePullPolicy: IfNotPresent
          env:
            - name: ACTION
              value: SEND
            - name: SHARE_DIR
              value: /cockroach/certs
            - name: SHARED_SECRET
              valueFrom:
                secretKeyRef:
                  name: cockroach-init-sync
                  key: shared-secret
          ports:
            - name: init-sync
              containerPort: 1337
          volumeMounts:
            - name: cockroach-certs
              mountPath: /cockroach/certs
      volumes:
        - name: cockroach-data
          persistentVolumeClaim:
            claimName: cockroach-data
        - name: cockroach-certs
          persistentVolumeClaim:
            claimName: cockroach-certs
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: cockroach-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: cockroach-certs
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 5Mi
